public static <U> U[] add(U e, U[] t) {
    U[] nuevoArray = Arrays.copyOf(t, t.length + 1); // Crea un nuevo array con un espacio extra
    nuevoArray[t.length] = e; // Agrega el elemento al final
    return nuevoArray;
}

public static <U> boolean buscar(U e, U[] t) {
    if (t == null) {
        return false; // Si el array es null, el elemento no se encuentra
    }
    for (U elemento : t) {
        if (elemento != null && elemento.equals(e)) { // Verifica si el elemento no es null y es igual a 'e'
            return true;
        }
    }
    return false; // El elemento no se encontr√≥
}

public static <U> U[] concatenar(U[] t1, U[] t2) {
    if (t1 == null && t2 == null) {
        return null; // Si ambos arrays son null, devuelve null
    }
    if (t1 == null) {
        return Arrays.copyOf(t2, t2.length); // Si t1 es null, devuelve una copia de t2
    }
    if (t2 == null) {
        return Arrays.copyOf(t1, t1.length); // Si t2 es null, devuelve una copia de t1
    }

    U[] nuevoArray = Arrays.copyOf(t1, t1.length + t2.length); // Crea un nuevo array con la longitud combinada
    System.arraycopy(t2, 0, nuevoArray, t1.length, t2.length); // Copia t2 al final de nuevoArray
    return nuevoArray;
}
